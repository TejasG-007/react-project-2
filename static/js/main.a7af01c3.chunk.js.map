{"version":3,"sources":["component/Header.js","component/RecipeItem.js","component/Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","search","onInputChange","onSearchClick","className","type","placeholder","value","onChange","onClick","RecipeItem","name","image","ingredientLines","src","map","ingredient","Recipe","recipes","recipe","key","Math","random","lebal","App","useState","setSearch","setRecipes","useEffect","getRecipe","a","Axios","get","res","data","hits","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0QA0BeA,G,MAvBA,SAAAC,GAAS,IACbC,EAAqCD,EAArCC,OAAQC,EAA6BF,EAA7BE,cAAcC,EAAeH,EAAfG,cAC7B,OACI,yBAAKC,UAAU,aACX,wBAAIA,UAAU,aACd,0BAAMA,UAAU,6BAAhB,YADA,eAIA,yBAAKA,UAAU,4BACP,2BAAOC,KAAK,OAAOD,UAAU,eAC5BE,YAAY,qBACZC,MAAON,EACPO,SAAUN,IACX,yBAAKE,UAAU,sBACX,4BAAQA,UAAU,eAClBK,QAASN,GADT,sBCQTO,EAtBG,SAACV,GAAW,IACnBW,EAA4BX,EAA5BW,KAAKC,EAAuBZ,EAAvBY,MAAMC,EAAiBb,EAAjBa,gBAClB,OACQ,yBAAKT,UAAU,yBACP,2BAAOU,IAAKF,EACZR,UAAU,0CACV,yBAAKA,UAAU,aACP,4BAAKO,IAEb,wBAAIP,UAAU,+BAENS,EAAgBE,KAAI,SAAAC,GAAU,OAC9B,wBAAIZ,UAAU,mBAAmBY,SCI9CC,EAfA,SAACjB,GAAW,IAChBkB,EAASlB,EAATkB,QACP,OACI,yBAAKd,UAAU,gBAEPc,EAAQH,KAAI,SAAAI,GAAM,OAAK,kBAAC,EAAD,CACnBC,IAAqB,IAAhBC,KAAKC,SACVX,KAAMQ,EAAOA,OAAOI,MACpBX,MAAOO,EAAOA,OAAOP,MACrBC,gBAAkBM,EAAOA,OAAON,uB,iBCgCrCW,MArCf,WAAgB,IAAD,EACiBC,mBAAU,UAD3B,mBACNxB,EADM,KACGyB,EADH,OAEeD,mBAAS,IAFxB,mBAENP,EAFM,KAEES,EAFF,KAObC,qBAAU,WACJC,MACH,IAEH,IAAMA,EAAS,uCAAG,4BAAAC,EAAA,sEACEC,IAAMC,IAAN,0CAA6C/B,EAA7C,mBARP,WAQO,oBAPN,qCAMI,OACVgC,EADU,OAEhBN,EAAWM,EAAIC,KAAKC,MAFJ,2CAAH,qDAaf,OACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,CAAQH,OAAQA,EACRC,cATU,SAACkC,GACnBV,EAAUU,EAAEC,OAAO9B,QASXJ,cAPU,WACpB0B,OAQE,yBAAKzB,UAAU,aACb,kBAAC,EAAD,CAAQc,QAASA,OC3BLoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a7af01c3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Header = props =>{\r\n    const {search, onInputChange,onSearchClick}=props;\r\n    return(\r\n        <div className=\"jumbotron\">\r\n            <h1 className=\"display-1\">\r\n            <span className=\"material-icons brand-icon\">fastfood</span>\r\n            Food Recipe\r\n            </h1>\r\n            <div className=\"input-group w-50 mx-auto\">\r\n                    <input type=\"text\" className=\"form-control\"\r\n                     placeholder=\"Search Your Recipe\" \r\n                     value={search} \r\n                     onChange={onInputChange}/>\r\n                    <div className=\"input-group-append\">\r\n                        <button className=\"btn btn-dark\" \r\n                        onClick={onSearchClick}>Search Recipe</button>\r\n                    </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n\r\nconst RecipeItem =(props) => {\r\n    const {name,image,ingredientLines}=props;\r\n    return (\r\n            <div className=\"card py-2 text-center\">\r\n                    <image src={image} \r\n                    className=\"img-fluid w-50 mx-auto rounded-circle\"/>\r\n                    <div className=\"card-body\">\r\n                            <h5>{name}</h5>\r\n                    </div>\r\n                    <ul className=\"list-group list-group-flush\">\r\n                        {\r\n                            ingredientLines.map(ingredient => (\r\n                            <li className=\"list-group-item\">{ingredient}</li>\r\n                            ))}\r\n                    </ul>\r\n                </div>\r\n        \r\n    )\r\n\r\n}\r\n\r\n\r\nexport default RecipeItem;","import React from 'react';\r\nimport RecipeItem from './RecipeItem';\r\n\r\n\r\nconst Recipe = (props) => {\r\n    const {recipes}=props;\r\n    return(\r\n        <div className=\"card-columns\">\r\n            {\r\n                recipes.map(recipe => (<RecipeItem \r\n                    key={Math.random() * 100}\r\n                    name={recipe.recipe.lebal} \r\n                    image={recipe.recipe.image} \r\n                    ingredientLines= {recipe.recipe.ingredientLines} />   \r\n                ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe;","import React, {useState , useEffect} from  'react';\nimport './App.css';\nimport Header from './component/Header';\nimport Recipe from './component/Recipe';\nimport Axios from \"axios\";\n\n\n\nfunction App() {\n  const [search , setSearch ] = useState (\"banana\"); \n  const [recipes,setRecipes] =useState([]);\n\n  const APP_ID=\"8fde0ed0\";\n  const APP_KEY=\"a3f5cc7b98b8df7bbfecf818fc1ae3dd\";\n\n  useEffect(() => {\n        getRecipe();\n  }, []);\n\n  const getRecipe = async () => {\n    const res = await Axios.get(`https://api.edamam.com/search?q=${search}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    setRecipes(res.data.hits)\n    \n }\n\n\n  const onInputChange = (e) => {\n      setSearch(e.target.value)\n  }\n  const onSearchClick = () =>{\n    getRecipe();\n  }\n  return (\n    <div className=\"App\">\n      <Header search={search}  \n              onInputChange={onInputChange}\n              onSearchClick={onSearchClick}\n              />\n      <div className=\"container\">\n        <Recipe recipes={recipes}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}